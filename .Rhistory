A_1_2_bias[s] <- abs(median(A_fit[,1,2]) / A_sim[1,2])
A_2_1_bias[s] <- abs(median(A_fit[,2,1]) / A_sim[2,1])
median(A_fit[,1,2])
A_sim[1,2]
tree <- pbtree(n = N_tips)
tree_data <- chop_tree(tree)
#  Specify number of traits
J <- 2
tree_data$J <- 2
tree_data$resp_type <- c(1,1)
# Draw samples from generative model
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
A_sim <- post_sim$A[1,,]
# Add simulated outcome data
tree_data$X <- post_sim$X[1,,]
n_warmup <- 100
n_samps <- 350
n_chains <- 8
fit <- sampling(fit_mod, data=tree_data, warmup=n_warmup, iter=n_samps, chains=8, cores=8, control=list(adapt_delta=0.9), init=0.1)
post_fit <- extract.samples(fit)
A_fit <- post_fit$A
A_1_2_bias[s] <- abs(median(A_fit[,1,2]) / A_sim[1,2])
A_2_1_bias[s] <- abs(median(A_fit[,2,1]) / A_sim[2,1])
tree <- pbtree(n = N_tips)
tree_data <- chop_tree(tree)
#  Specify number of traits
J <- 2
tree_data$J <- 2
tree_data$resp_type <- c(1,1)
# Draw samples from generative model
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
A_sim <- post_sim$A[1,,]
# Add simulated outcome data
tree_data$X <- post_sim$X[1,,]
n_warmup <- 100
n_samps <- 350
n_chains <- 8
fit <- sampling(fit_mod, data=tree_data, warmup=n_warmup, iter=n_samps, chains=8, cores=8, control=list(adapt_delta=0.9), init=0.1)
post_fit <- extract.samples(fit)
A_fit <- post_fit$A
A_1_2_bias[s] <- abs(median(A_fit[,1,2]) / A_sim[1,2])
A_2_1_bias[s] <- abs(median(A_fit[,2,1]) / A_sim[2,1])
A_sim
apply(post_fit$A, 2:3, median)
apply(post_fit$Q, 2:3, median)
apply(post_sim$Q, 2:3, median)
library(rethinking)
library(phytools)
library(phangorn)
source("chop_tree.R")
dens(post_fit$Q[,1,2])
library(rethinking)
library(phytools)
library(phangorn)
source("chop_tree.R")
## Simulate a random phylogenetic tree (pure birth)
N_tips <- 25
# bias
A_1_2_bias <- c()
A_2_1_bias <- c()
# Compile stan models
sim_mod <- stan_model(file="DPM_sim.stan")
fit_mod <- stan_model(file="DPM_fit_cov.stan")
###################################################
#### Loop over simulations ########################
N_sims <- 100
for ( s in 1:N_sims ) {
tree <- pbtree(n = N_tips)
tree_data <- chop_tree(tree)
#  Specify number of traits
J <- 2
tree_data$J <- 2
tree_data$resp_type <- c(1,1)
# Draw samples from generative model
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
A_sim <- post_sim$A[1,,]
# Add simulated outcome data
tree_data$X <- post_sim$X[1,,]
n_warmup <- 100
n_samps <- 350
n_chains <- 8
fit <- sampling(fit_mod, data=tree_data, warmup=n_warmup, iter=n_samps, chains=8, cores=8, control=list(adapt_delta=0.9), init=0.1)
post_fit <- extract.samples(fit)
A_fit <- post_fit$A
A_1_2_bias[s] <- abs(median(A_fit[,1,2]) / A_sim[1,2])
A_2_1_bias[s] <- abs(median(A_fit[,2,1]) / A_sim[2,1])
} # end loop over simulations
# Save results
write.csv(data.frame(A_1_2_bias, A_2_1_bias), file="cov_bias.csv")
hist(A_1_2_bias)
median(A_2_2_bias)
median(A_1_2_bias)
median(A_2_1_bias)
library(rethinking)
library(phytools)
library(phangorn)
source("chop_tree.R")
## Simulate a random phylogenetic tree (pure birth)
N_tips <- 25
# bias
A_1_2_bias <- c()
A_2_1_bias <- c()
# Compile stan models
sim_mod <- stan_model(file="DPM_sim.stan")
fit_mod <- stan_model(file="DPM_fit_cov.stan")
###################################################
#### Loop over simulations ########################
N_sims <- 100
for ( s in 1:N_sims ) {
tree <- pbtree(n = N_tips)
tree_data <- chop_tree(tree)
#  Specify number of traits
J <- 2
tree_data$J <- 2
tree_data$resp_type <- c(1,1)
# Draw samples from generative model
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
A_sim <- post_sim$A[1,,]
# Add simulated outcome data
tree_data$X <- post_sim$X[1,,]
n_warmup <- 100
n_samps <- 350
n_chains <- 8
fit <- sampling(fit_mod, data=tree_data, warmup=n_warmup, iter=n_samps, chains=8, cores=8, control=list(adapt_delta=0.9), init=0.1)
post_fit <- extract.samples(fit)
A_fit <- post_fit$A
A_1_2_bias[s] <- abs(median(A_fit[,1,2]) / A_sim[1,2])
A_2_1_bias[s] <- abs(median(A_fit[,2,1]) / A_sim[2,1])
} # end loop over simulations
# Save results
write.csv(data.frame(A_1_2_bias, A_2_1_bias), file="cov_bias.csv")
hist(A_1_2_bias)
mean(A_1_2_bias < 1)
cross_effects <- cbind(A_1_2_bias, A_2_1_bias)
cross_effects <- rbind(A_1_2_bias, A_2_1_bias)
hist(cross_effects)
dens(cross_effects)
hist(cross_effects)
hist(cross_effects, breaks = 50)
hist(cross_effects, breaks = 30)
hist(cross_effects, breaks = 40)
hist(cross_effects, breaks = 40)
hist(cross_effects, breaks = 50)
hist(cross_effects[cross_effects < 30], breaks = 50)
abline(v=1)
median(cross_effects)
chainmode(cross_effects)
mean(cross_effects)
library(rethinking)
library(phytools)
library(phangorn)
source("chop_tree.R")
## Simulate a random phylogenetic tree (pure birth)
N_tips <- 25
ranks <- read.csv("SBC_ranks.csv")
off_diag_ranks <- cbind(ranks$A_1_2_rank, ranks$A_2_1_rank)
hist(off_diag_ranks/1200, breaks=100, main="", xlab="Rank (prop max)", col="skyblue", border=NA)
hist(off_diag_ranks)
dens(off_diag_ranks)
hist(off_diag_ranks/2000, breaks=100, main="", xlab="Rank (prop max)", col="skyblue", border=NA)
hist(off_diag_ranks, breaks=100, main="", xlab="Rank (prop max)", col="skyblue", border=NA)
hist(off_diag_ranks[,1/2000, breaks=100, main="", xlab="Rank (prop max)", col="skyblue", border=NA)
hist(off_diag_ranks[,1]/2000, breaks=100, main="", xlab="Rank (prop max)", col="skyblue", border=NA)
max(off_diag_ranks)
hist(off_diag_ranks[,1]/2001, breaks=100, main="", xlab="Rank (prop max)", col="skyblue", border=NA)
hist(off_diag_ranks[,1]/2001, breaks=10, main="", xlab="Rank (prop max)", col="skyblue", border=NA)
hist(off_diag_ranks[,1]/2001, breaks=8, main="", xlab="Rank (prop max)", col="skyblue", border=NA)
hist(off_diag_ranks[,1]/2001, breaks=5, main="", xlab="Rank (prop max)", col="skyblue", border=NA)
hist(off_diag_ranks[,1]/2001, breaks=20, main="", xlab="Rank (prop max)", col="skyblue", border=NA)
hist(off_diag_ranks[,1]/2001, breaks=30, main="", xlab="Rank (prop max)", col="skyblue", border=NA)
hist(off_diag_ranks[,1]/2001, breaks=30, main="", xlab="Rank (prop max)", col="skyblue", border=NA)
hist(rnorm(500, 0, 1))
hist(rnorm(1000, 0, 1))
hist(rnorm(1000, 0, 0.1))
hist(rnorm(10000, 0, 0.1))
hist(rnorm(10000, 0, 0.1) + 2)
par(mfrow=c(1,2))
hist(rnorm(10000, 0, 0.1) + 2)
hist(rnorm(10000, 2, 0.1))
library(rethinking)
library(phytools)
library(phangorn)
source("chop_tree.R")
## Simulate a random phylogenetic tree (pure birth)
N_tips <- 25
# Vectors to hold rank statistics for A matrix
A_1_2_rank <- c()
A_2_1_rank <- c()
# Compile stan models
sim_mod <- stan_model(file="DPM_sim.stan")
tree <- pbtree(n = N_tips)
tree_data <- chop_tree(tree)
#  Specify number of traits
J <- 2
tree_data$J <- 2
tree_data$resp_type <- c(1,1)
# Draw samples from generative model
sim <- sampling(sim_mod, data=tree_data, iter=1000, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
hist(post_sim$b[,1])
mean(post_sim$b[,1])
sd(post_sim$b[,1])
# Draw samples from generative model
b_sim <- c()
# Draw samples from generative model
b_sim <- c()
for (s in 1:200) {
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
b_sim[s] <- post_sim$b[1,1]
}
hist(b_sim)
# Draw samples from generative model
b_sim <- c()
# Draw samples from generative model
b_sim <- c()
for (s in 1:1000) {
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
b_sim[s] <- post_sim$b[1,1]
}
hist(b_sim)
# Compile stan models
sim_mod <- stan_model(file="DPM_sim.stan")
tree <- pbtree(n = N_tips)
tree_data <- chop_tree(tree)
#  Specify number of traits
J <- 2
tree_data$J <- 2
tree_data$resp_type <- c(1,1)
# Draw samples from generative model
b_sim <- c()
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1)
# Compile stan models
sim_mod <- stan_model(file="DPM_sim.stan")
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1)
# Compile stan models
sim_mod <- stan_model(file="DPM_sim.stan")
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1)
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
# Draw samples from generative model
b_sim <- c()
for (s in 1:1000) {
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
b_sim[s] <- post_sim$b[1,1]
}
hist(b_sim)
str(b_sim)
post_sim <- extract.samples(sim)
str(post_sim)
# Compile stan models
sim_mod <- stan_model(file="DPM_sim.stan")
tree <- pbtree(n = N_tips)
tree_data <- chop_tree(tree)
#  Specify number of traits
J <- 2
tree_data$J <- 2
tree_data$resp_type <- c(1,1)
# Draw samples from generative model
b_sim <- c()
for (s in 1:1000) {
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
b_sim[s] <- post_sim$b[1,1]
}
hist(b_sim)
diag_sim[s] <- post_sim$A_diag[1,1]
post_sim$A_diag
diag_sim[s] <- post_sim$A_diag[1,1]
# Draw samples from generative model
param_sim <- c()
for (s in 1:1000) {
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
param_sim[s] <- post_sim$A_diag[1,1]
}
hist(param_sim)
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
param_sim[s] <- post_sim$A_diag[1,1]
post_sim$A_diag
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
post_sim$A_diag
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
post_sim
post_sim$A_diag
post_sim$b
post_sim$b
tree <- pbtree(n = N_tips)
tree_data <- chop_tree(tree)
#  Specify number of traits
J <- 2
tree_data$J <- 2
tree_data$resp_type <- c(1,1)
# Draw samples from generative model
param_sim <- c()
for (s in 1:1000) {
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
param_sim[s] <- post_sim$A_diag[1,1]
}
hist(param_sim)
# Compile stan models
sim_mod <- stan_model(file="DPM_sim.stan")
tree <- pbtree(n = N_tips)
tree_data <- chop_tree(tree)
#  Specify number of traits
J <- 2
tree_data$J <- 2
tree_data$resp_type <- c(1,1)
# Draw samples from generative model
param_sim <- c()
for (s in 1:1000) {
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
param_sim[s] <- post_sim$A_diag[1,1]
}
hist(param_sim)
## Simulate a random phylogenetic tree (pure birth)
N_tips <- 25
# Vectors to hold rank statistics for A matrix
A_1_2_rank <- c()
A_2_1_rank <- c()
fit_mod <- stan_model(file="DPM_fit.stan")
tree <- pbtree(n = N_tips)
tree_data <- chop_tree(tree)
#  Specify number of traits
J <- 2
tree_data$J <- 2
tree_data$resp_type <- c(1,1)
# Draw samples from generative model
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
A_sim <- post_sim$A[1,,]
# Add simulated outcome data
tree_data$X <- post_sim$X[1,,]
n_warmup <- 100
n_samps <- 350
n_chains <- 8
fit <- sampling(fit_mod, data=tree_data, warmup=n_warmup, iter=n_samps, chains=8, cores=8, control=list(adapt_delta=0.9), init=0.1)
post_fit <- extract.samples(fit)
A_fit <- post_fit$A
A_fit
apply(A_fit, 2:3, median)
apply(post_sim$A, 2:3, median)
A_1_2_rank[s] <- rank( c(A_sim[1,2], A_fit[,1,2]) )[1]
A_2_1_rank[s] <- rank( c(A_sim[2,1], A_fit[,2,1]) )[1]
A_1_2_rank
A_2_1_rank
N <- 500
count_variable <- rpois(N, 1)
hist(count_variable)
count_variable <- rpois(N, 2)
count_variable <- rpois(N, 2)
hist(count_variable)
sqrt_count <- sqrt(count_variable)
sqrt(0)
count_variable <- rpois(N, 2)
sqrt_count <- sqrt(count_variable)
fit_notrans <- lm(count_variable ~ 1)
plot(fit_notrans)
hist(fit_notrans$residuals)
fit_notrans <- lm(count_variable ~ 1)
fit_trans <- lm(sqrt(count_variable) ~ 1)
par(mfrow=c(1,2))
hist(fit_notrans$residuals)
hist(fit_trans$residuals)
N <- 1000
count_variable <- rpois(N, 2)
sqrt_count <- sqrt(count_variable)
fit_notrans <- lm(count_variable ~ 1)
fit_trans <- lm(sqrt(count_variable) ~ 1)
par(mfrow=c(1,2))
hist(fit_notrans$residuals)
hist(fit_trans$residuals)
plot(fit_notrans$residuals ~ fit_notrans$fitted.values)
hist(fit_notrans$fitted.values)
hist(fit_notrans$residuals)
hist(fit_trans$residuals)
N <- 1000
count_variable <- rpois(N, 4)
sqrt_count <- sqrt(count_variable)
fit_notrans <- lm(count_variable ~ 1)
fit_trans <- lm(sqrt(count_variable) ~ 1)
par(mfrow=c(1,2))
hist(fit_notrans$residuals)
hist(fit_trans$residuals)
count_variable <- rpois(N, 0.2)
sqrt_count <- sqrt(count_variable)
fit_notrans <- lm(count_variable ~ 1)
fit_trans <- lm(sqrt(count_variable) ~ 1)
par(mfrow=c(1,2))
hist(fit_notrans$residuals)
hist(fit_trans$residuals)
count_variable <- rpois(N, 0.8)
sqrt_count <- sqrt(count_variable)
fit_notrans <- lm(count_variable ~ 1)
fit_trans <- lm(sqrt(count_variable) ~ 1)
par(mfrow=c(1,2))
hist(fit_notrans$residuals)
hist(fit_trans$residuals)
count_variable <- rpois(N, 8)
sqrt_count <- sqrt(count_variable)
fit_notrans <- lm(count_variable ~ 1)
fit_trans <- lm(sqrt(count_variable) ~ 1)
par(mfrow=c(1,2))
hist(fit_notrans$residuals)
hist(fit_trans$residuals)
mean(fit_notrans$residuals)
count_variable <- rpois(N, 6)
sqrt_count <- sqrt(count_variable)
fit_notrans <- lm(count_variable ~ 1)
fit_trans <- lm(sqrt(count_variable) ~ 1)
par(mfrow=c(1,2))
hist(fit_notrans$residuals)
hist(fit_trans$residuals)
dens(fit_notrans$residuals)
dens(fit_trans$residuals)
predictor_variable <- rnorm(N, 0, 1)
log(5)
log(6)
predictor_variable <- rnorm(N, 0, 1)
count_variable <- rpois(N, exp(log(6 + predictor_variable)))
sqrt_count <- sqrt(count_variable)
predictor_variable <- rnorm(N, 0, 1)
count_variable <- rpois(N, exp(log(6 + predictor_variable)))
sqrt_count <- sqrt(count_variable)
fit_notrans <- lm(count_variable ~ 1)
fit_trans <- lm(sqrt(count_variable) ~ 1)
par(mfrow=c(1,2))
dens(fit_notrans$residuals)
dens(fit_trans$residuals)
fit_notrans <- lm(count_variable ~ predictor_variable)
fit_trans <- lm(sqrt(count_variable) ~ predictor_variable)
par(mfrow=c(1,2))
dens(fit_notrans$residuals)
dens(fit_trans$residuals)
predictor_variable <- rnorm(N, 0, 1)
count_variable <- rpois(N, exp(log(2 + predictor_variable)))
sqrt_count <- sqrt(count_variable)
fit_notrans <- lm(count_variable ~ predictor_variable)
predictor_variable <- rnorm(N, 0, 1)
count_variable <- rpois(N, exp(log(2) + predictor_variable))
sqrt_count <- sqrt(count_variable)
fit_notrans <- lm(count_variable ~ predictor_variable)
fit_trans <- lm(sqrt(count_variable) ~ predictor_variable)
par(mfrow=c(1,2))
dens(fit_notrans$residuals)
dens(fit_trans$residuals)
predictor_variable <- rnorm(N, 0, 1)
count_variable <- rpois(N, exp(log(2) + predictor_variable*1))
sqrt_count <- sqrt(count_variable)
fit_notrans <- lm(count_variable ~ predictor_variable)
fit_trans <- lm(sqrt(count_variable) ~ predictor_variable)
par(mfrow=c(1,2))
dens(fit_notrans$residuals)
dens(fit_trans$residuals)
predictor_variable <- rnorm(N, 0, 1)
count_variable <- rpois(N, exp(log(2) + predictor_variable*0.5))
sqrt_count <- sqrt(count_variable)
fit_notrans <- lm(count_variable ~ predictor_variable)
fit_trans <- lm(sqrt(count_variable) ~ predictor_variable)
par(mfrow=c(1,2))
dens(fit_notrans$residuals)
dens(fit_trans$residuals)
predictor_variable <- rnorm(N, 0, 1)
count_variable <- rpois(N, exp(log(2) + predictor_variable*2))
sqrt_count <- sqrt(count_variable)
fit_notrans <- lm(count_variable ~ predictor_variable)
fit_trans <- lm(sqrt(count_variable) ~ predictor_variable)
par(mfrow=c(1,2))
dens(fit_notrans$residuals)
dens(fit_trans$residuals)
predictor_variable <- rnorm(N, 0, 1)
count_variable <- rpois(N, exp(log(2) + predictor_variable*1))
sqrt_count <- sqrt(count_variable)
fit_notrans <- lm(count_variable ~ predictor_variable)
fit_trans <- lm(sqrt(count_variable) ~ predictor_variable)
par(mfrow=c(1,2))
dens(fit_notrans$residuals)
dens(fit_trans$residuals)
predictor_variable <- rnorm(N, 0, 1)
count_variable <- rpois(N, exp(log(2) + predictor_variable*0.7))
sqrt_count <- sqrt(count_variable)
fit_notrans <- lm(count_variable ~ predictor_variable)
fit_trans <- lm(sqrt(count_variable) ~ predictor_variable)
par(mfrow=c(1,2))
dens(fit_notrans$residuals)
dens(fit_trans$residuals)
plot(count_variable ~ predictor_variable)
dens(fit_notrans$residuals)
dens(fit_trans$residuals)
library(rethinking)
library(phytools)
library(phangorn)
source("chop_tree.R")
## Simulate a random phylogenetic tree (pure birth)
N_tips <- 25
# Vectors to hold rank statistics for A matrix
A_1_2_rank <- c()
A_2_1_rank <- c()
# Compile stan models
sim_mod <- stan_model(file="DPM_sim.stan")
saveRDS(sim_mod, "sim_mod.rds")
