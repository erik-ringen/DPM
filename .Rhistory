install.packages(caTools)
install.packages("caTools")
library(brms)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
## READ IN DATA ####
# Read in data IMPORTANT TO MATCH WITH YOUR PATH
rm(list=ls()) #clean your environment
all <- read.csv("\\\\files.iem.uzh.ch\\Data\\Institute\\Human_Ecology\\ajaegg\\Private\\My Documents\\GitHub\\flood_TD\\derived//all.txt", sep="")
all$choice[all$value == "delay_reward"]  <- 1
all$choice[all$value == "immediate_reward"]  <- 0
all$choice[all$value == "?"]  <- NA
chavez1 = bf(choice ~ if_else ( smag >= rewmag / (1 + exp(logk) * delay), alpha, 1 - alpha ), # if smag >= vlarge, p choice 0-0.5, if vlarge > smag, p choice 0.5-1 - alpha governs acuity, e.g. if alpha = 0 choices are perfectly consistent (p is 0 or 1), if alpha = 0.5 choice is random
logk ~ 1 + (1|key), # linear model of logk with individual-level intercepts (keep k logged so it cannot take on negative values)
alpha ~ 1 + (1|key), # linear model of alpha with individual-level intercepts
nl = TRUE)
get_prior(chavez1, family = bernoulli(link="identity"), data=all) # use identity link because linear model of choice is on probability scale
exp(1)
prior.chav1= c(prior(normal(-4,0.1), nlpar = 'logk', class=b, coef=Intercept), # same logk priors as above
prior(uniform(0,0.5), nlpar = 'alpha', class=b, lb=0, ub=0.5), # alpha can be anywhere from 0 to 0.5 - though maybe better to assign higher prior probability to lower values (since 0.5 = random)??
prior(cauchy(0,1), nlpar = 'logk', class=sd, group= key, coef=Intercept),
prior(cauchy(0,1), nlpar = 'alpha', class=sd, group= key, coef=Intercept))
prior.chav1= c(prior(normal(-4,0.1), nlpar = 'logk', class=b, coef=Intercept), # same logk priors as above
prior(uniform(0,0.5), nlpar = 'alpha', class=b, lb=0, ub=0.5), # alpha can be anywhere from 0 to 0.5 - though maybe better to assign higher prior probability to lower values (since 0.5 = random)??
prior(cauchy(0,1), nlpar = 'logk', class=sd, group= key, coef=Intercept),
prior(cauchy(0,1), nlpar = 'alpha', class=sd, group= key, coef=Intercept))
m.chav1 = brm(chavez1, data = all, family = bernoulli(link='identity'),
prior = prior.chav1, sample_prior = "only", control = list(max_treedepth = 15))
post_mchav1<- posterior_samples(m.chav1)
summary(exp(post_mchav1$b_logk_Intercept)) # mean k is <0.1, max = 4 -> reduce mean logk to -4
dens(exp(post_mchav1$b_logk_Intercept))
exp(-3)
exp(-2)
exp(1)
exp(-1)
log(0.12)
log(0.05)
log(0.21)
prior.chav1= c(prior(normal(-2.1,1), nlpar = 'logk', class=b, coef=Intercept), # same logk priors as above - centered on median of Kirby et al, SD covers ~range from 1st to 3rd quartile
prior(uniform(0,0.5), nlpar = 'alpha', class=b, lb=0, ub=0.5), # alpha can be anywhere from 0 to 0.5 - though maybe better to assign higher prior probability to lower values (since 0.5 = random)??
prior(cauchy(0,1), nlpar = 'logk', class=sd, group= key, coef=Intercept),
prior(cauchy(0,1), nlpar = 'alpha', class=sd, group= key, coef=Intercept))
m.chav1 = brm(chavez1, data = all, family = bernoulli(link='identity'),
prior = prior.chav1, sample_prior = "only", control = list(max_treedepth = 15))
post_mchav1<- posterior_samples(m.chav1)
summary(exp(post_mchav1$b_logk_Intercept)) #
dens(exp(post_mchav1$b_logk_Intercept))
prior_k<- rnorm(1000, post_mchav1$b_logk_Intercept, post_mchav1$sd_key__logk_Intercept)
summary(exp(prior_k))
prior.chav1= c(prior(normal(-2.1,0.5), nlpar = 'logk', class=b, coef=Intercept), # same logk priors as above - centered on median of Kirby et al, SD covers ~range from 1st to 3rd quartile
prior(uniform(0,0.5), nlpar = 'alpha', class=b, lb=0, ub=0.5), # alpha can be anywhere from 0 to 0.5 - though maybe better to assign higher prior probability to lower values (since 0.5 = random)??
prior(cauchy(0,0.5), nlpar = 'logk', class=sd, group= key, coef=Intercept),
prior(cauchy(0,1), nlpar = 'alpha', class=sd, group= key, coef=Intercept))
m.chav1 = brm(chavez1, data = all, family = bernoulli(link='identity'),
prior = prior.chav1, sample_prior = "only", control = list(max_treedepth = 15))
post_mchav1<- posterior_samples(m.chav1)
summary(exp(post_mchav1$b_logk_Intercept)) # predicted mean k ranges from 0.002 to 15.6
dens(exp(post_mchav1$b_logk_Intercept))
library(rethinking)
dens(exp(post_mchav1$b_logk_Intercept))
prior_k<- rnorm(1000, post_mchav1$b_logk_Intercept, post_mchav1$sd_key__logk_Intercept)
summary(exp(prior_k)) # simulated individual k values mostly 0, but up to huge numbers --> tighten prior
prior.chav1= c(prior(normal(-2.1,0.5), nlpar = 'logk', class=b, coef=Intercept), # same logk priors as above - centered on median of Kirby et al, SD covers ~range from 1st to 3rd quartile
prior(uniform(0,0.5), nlpar = 'alpha', class=b, lb=0, ub=0.5), # alpha can be anywhere from 0 to 0.5 - though maybe better to assign higher prior probability to lower values (since 0.5 = random)??
prior(cauchy(0,0.1), nlpar = 'logk', class=sd, group= key, coef=Intercept),
prior(cauchy(0,1), nlpar = 'alpha', class=sd, group= key, coef=Intercept))
m.chav1 = brm(chavez1, data = all, family = bernoulli(link='identity'),
prior = prior.chav1, sample_prior = "only", control = list(max_treedepth = 15))
post_mchav1<- posterior_samples(m.chav1)
summary(exp(post_mchav1$b_logk_Intercept)) # predicted mean k ranges from 0.02 to 0.8 -> makes sense in light of Kirby
dens(exp(post_mchav1$b_logk_Intercept))
# simulate k values from mean and SD
prior_k<- rnorm(1000, post_mchav1$b_logk_Intercept, post_mchav1$sd_key__logk_Intercept)
summary(exp(prior_k)) # simulated individual k values mostly 0, but up to huge numbers --> tighten prior
prior.chav1= c(prior(normal(-2.1,0.5), nlpar = 'logk', class=b, coef=Intercept), # same logk priors as above - centered on median of Kirby et al, SD covers ~range from 1st to 3rd quartile
prior(uniform(0,0.5), nlpar = 'alpha', class=b, lb=0, ub=0.5), # alpha can be anywhere from 0 to 0.5 - though maybe better to assign higher prior probability to lower values (since 0.5 = random)??
prior(cauchy(0,0.05), nlpar = 'logk', class=sd, group= key, coef=Intercept),
prior(cauchy(0,1), nlpar = 'alpha', class=sd, group= key, coef=Intercept))
m.chav1 = brm(chavez1, data = all, family = bernoulli(link='identity'),
prior = prior.chav1, sample_prior = "only", control = list(max_treedepth = 15))
post_mchav1<- posterior_samples(m.chav1)
summary(exp(post_mchav1$b_logk_Intercept)) # predicted mean k ranges from 0.02 to 0.8 -> makes sense in light of Kirby
dens(exp(post_mchav1$b_logk_Intercept))
# simulate k values from mean and SD
prior_k<- rnorm(1000, post_mchav1$b_logk_Intercept, post_mchav1$sd_key__logk_Intercept)
summary(exp(prior_k)) # simulated individual k values mostly 0, but up to huge numbers --> tighten prior
dens(exp(prior_k)) #
summary(post_mchav1$b_alpha_Intercept) # as expected between 0 and 0.5
# simulate "by hand"
smag1<- 16
rewmag1<- 17
delay1<- 157
alpha<- 0.05
choice1 <-  rbinom(n = nrow(post_mchav1), 1, ifelse ( smag1 >= rewmag1 / (1 + exp(post_mchav1$b_logk_Intercept) * delay1), alpha, 1 - alpha ))
summary(choice1) # almost all 0, amount of 1 depends on alpha
smag2<- 11
rewmag2<- 16
delay2<- 30
choice2 <-  rbinom(n = nrow(post_mchav1), 1, ifelse ( smag2 >= rewmag2 / (1 + exp(post_mchav1$b_logk_Intercept) * delay2), alpha, 1 - alpha ))
summary(choice2) # about half-half
# include simulated alphas
choice1a <-  rbinom(n = nrow(post_mchav1), 1, ifelse ( smag1 >= rewmag1 / (1 + exp(post_mchav1$b_logk_Intercept) * delay1), alpha, 1 - alpha ))
choice2a <-  rbinom(n = nrow(post_mchav1), 1, ifelse ( smag2 >= rewmag2 / (1 + exp(post_mchav1$b_logk_Intercept) * delay2), post_mchav1$b_alpha_Intercept, 1 - post_mchav1$b_alpha_Intercept ))
summary(choice1a)
summary(choice2a)
cor(choice2, choice2a) # 0.45, so different choices than before because alpha changes
### run model
m.chav1 = brm(chavez1, data = all, family = bernoulli(link='identity'),
prior = prior.chav1, control = list(max_treedepth = 15),
chains = 4, iter = 4000, warmup=2000, cores = 4, inits=0)
plot(m.chav1)
m.chav1 = brm(chavez1, data = all, family = bernoulli(link='identity'),
prior = prior.chav1, control = list(adapt_delta=0.99, max_treedepth = 15),
chains = 4, iter = 4000, warmup=2000, cores = 4, inits=0)
summary(m.chav1)
m.chav1 = brm(chavez1, data = all.2, family = bernoulli(link='identity'),
prior = prior.chav1, control = list(adapt_delta=0.99, max_treedepth = 15),
chains = 4, iter = 4000, warmup=2000, cores = 4, inits=0)
all.1<-subset(all, !(all$consistent=="inconsistency"))
all.2<-subset(all.1, !(all.1$consistent=="no_change"))
m.chav1 = brm(chavez1, data = all.2, family = bernoulli(link='identity'),
prior = prior.chav1, control = list(adapt_delta=0.99, max_treedepth = 15),
chains = 4, iter = 4000, warmup=2000, cores = 4, inits=0)
Sys.which("make")
install.packages("jsonlite", type = "source")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M)) file.create(M)
cat("\n CXX14FLAGS += -mtune=native -O3 -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2",
file = M, sep = "\n", append = FALSE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
library(rethinking)
ID<- 1:250
d<- as.data.frame(ID)
## simulate k for each
d$logk<- rnorm(250, -2.1, 0.5) # mean = Kirby median, SD ranges from Kirby 1st - 3rd quartile
d$logk2<- rnorm(250, -1.5, 0.5) # mean = Kirby median, SD ranges from Kirby 1st - 3rd quartile
## repeat 8 times (for 8 choice questions)
d2<- rbind(d, d, d, d, d, d, d, d)
# sort in ascending ID order
d3<- d2[sort(d2$ID),]
## generate time preference questions
d3$smag<- rep(c(6, 11, 10, 11, 16, 13, 14, 8),250)
d3$rewmag<- rep(c(17, 16, 24, 15, 17, 15, 17, 15),250)
d3$delay<- rep(c(7, 30, 14, 61, 157, 119, 91, 20),250)
## generate subjective rewards
d3$V<- d3$rewmag/ (1 + exp(d3$logk) * d3$delay)
d3$choice2<- rbinom(2000, 1, inv_logit_scaled(d3$V - d3$smag))
library(brms)
d3$choice2<- rbinom(2000, 1, inv_logit(d3$V - d3$smag))
summary(d3$choice2)
394.80 + 540 + 2729.40 + 436.80 + 2729.40 + 601.20 + 540 + 545.40
12 * 165
525000*0.0425
525000*0.0425*11/12
473.25+545.40+1075.85+226.90+3800+394.95
890*0.9143
950*0.9143
10!
10+9+8+7+6+5+4+3+2+1
Sys.getenv("BINPREF")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M)) file.create(M)
cat("\n CXX14FLAGS += -mtune=native -O3 -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2",
file = M, sep = "\n", append = FALSE)
Sys.getenv("BINPREF")
writeLines('PATH="${RTOOLS42_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M)) file.create(M)
cat("\n CXX14FLAGS += -mtune=native -O3 -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2",
file = M, sep = "\n", append = FALSE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE, lib="C:/Program Files/R/R-4.2.0/library")
install.packages("brms", dependencies = TRUE, lib="C:/Program Files/R/R-4.2.0/library")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE, lib="C:/Program Files/R/R-4.2.0/library")
install.packages(c("coda","mvtnorm","devtools","loo","dagitty","shape"), lib="C:/Program Files/R/R-4.2.0/library")
devtools::install_github("rmcelreath/rethinking")
devtools::install_github("rmcelreath/rethinking", lib="C:/Program Files/R/R-4.2.0/library")
example(stan_model, package = "rstan", run.dontrun = TRUE)
devtools::install_github("rmcelreath/rethinking", lib="C:/Program Files/R/R-4.2.0/library")
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), lib="C:/Program Files/R/R-4.2.0/library")
devtools::install_github("rmcelreath/rethinking", lib="C:/Program Files/R/R-4.2.0/library")
library(rethinking)
library(brms)
Sys.getenv("BINPREF")
writeLines('PATH="${RTOOLS42_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source", lib = “C:/Program Files/R/R-4.2.0”)
install.packages("jsonlite", type = "source", lib = "C:/Program Files/R/R-4.2.0")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M)) file.create(M)
cat("\n CXX14FLAGS += -mtune=native -O3 -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2",
file = M, sep = "\n", append = FALSE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE, lib = 'C:/Program Files/R/R-4.2.0')
example(stan_model, package = "rstan", run.dontrun = TRUE)
library(rstan)
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
Sys.setenv(MAKEFLAGS = paste0("-j",parallel::detectCores()))
install.packages(c("StanHeaders","rstan"),type="source", lib = "C:/Program Files/R/R-4.2.0/library")
Sys.getenv("BINPREF")
writeLines('PATH="${RTOOLS42_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source", lib = "C:/Program Files/R/R-4.2.0/library")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M)) file.create(M)
cat("\n CXX14FLAGS += -mtune=native -O3 -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2",
file = M, sep = "\n", append = FALSE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
Sys.which("make")
install.packages("jsonlite", type = "source", lib = "C:/Program Files/R/R-4.2.0/library")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M)) file.create(M)
cat("\n CXX14FLAGS += -mtune=native -O3 -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2",
file = M, sep = "\n", append = FALSE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = paste0("-j",parallel::detectCores()))
install.packages(c("StanHeaders","rstan"),type="source", lib = "C:/Program Files/R/R-4.2.0/library")
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE)
library(rethinking)
load("post_m1_looped.robj")
precis(post_m1_looped)
memory.limit
memory.limit()
memory.limit(size = 1e6)
precis(post_m1_looped)
precis(post_m1_looped, prob=0.9)
precis(post_m1_looped, prob=0.9, hist=FALSE)
library(knitr)
library(rethinking)
load("post_m1_looped.robj")
precis(post_m1_looped, prob=0.9)
s1<- data.frame(Parameter = c("Intercept (female bias)", "Intercept (male bias)", "Phylo SD (female bias)", "Phylo SD (male bias)"), Mean = c(round(median(post_m1$b_muFemales_Intercept),2), round(median(post_m1$b_muMales_Intercept),2), round(median(post_m1$sd_Genus_species__muFemales_Intercept),2), round(median(post_m1$sd_Genus_species__muMales_Intercept),2)), lwr90CI = c(round(HPDI(post_m1$b_muFemales_Intercept, prob=0.90)[1],2), round(HPDI(post_m1$b_muMales_Intercept, prob=0.90)[1],2), round(HPDI(post_m1$sd_Genus_species__muFemales_Intercept, prob=0.90)[1],2), round(HPDI(post_m1$sd_Genus_species__muMales_Intercept, prob=0.90)[1],2)), upr90CI = c(round(HPDI(post_m1$b_muFemales_Intercept, prob=0.90)[2],2), round(HPDI(post_m1$b_muMales_Intercept, prob=0.90)[2],2), round(HPDI(post_m1$sd_Genus_species__muFemales_Intercept, prob=0.90)[2],2), round(HPDI(post_m1$sd_Genus_species__muMales_Intercept, prob=0.90)[2],2)))
tinytex::install_tinytex()
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE)
library(rethinking)
load("post_m1_looped.robj")
Sys.setlocale(locale='Chinese')
precis(post_m1_looped, prob=0.9)
memory.limit ( size = 1e6 )
precis(post_m1_looped, prob=0.9)
library(bayesplot)
color_scheme_set(theme = "teal")
color_scheme_set("teal")
mcmc_areas(post_m1_looped, point_est="median", prob = 0.90) + geom_vline(xintercept=0, linetype=2)+
labs(title="") + theme(plot.title = element_text(size=10)) +
scale_y_discrete(labels=c("Female intercept", "Male intercept", "Female Phylo SD", "Male Phylo SD")) +  theme(axis.text=element_text(size=5)) +
annotate("text", x = rep(-0.5,5), y = c(1.5, 2.5, 3.5, 4.5, 5.5), label = PP1c, size=2)
mcmc_areas(post_m1_looped, point_est="median", prob = 0.90) + geom_vline(xintercept=0, linetype=2)+
labs(title="") + theme(plot.title = element_text(size=10)) +
scale_y_discrete(labels=c("Female intercept", "Male intercept", "Female Phylo SD", "Male Phylo SD")) +  theme(axis.text=element_text(size=5))
str(post_m1_looped)
mcmc_areas(post_m1_looped[1:4,], point_est="median", prob = 0.90) + geom_vline(xintercept=0, linetype=2)+
labs(title="") + theme(plot.title = element_text(size=10)) +
scale_y_discrete(labels=c("Female intercept", "Male intercept", "Female Phylo SD", "Male Phylo SD")) +  theme(axis.text=element_text(size=5))
mcmc_areas(post_m1_looped[1:4,], point_est="median", prob = 0.90) + geom_vline(xintercept=0, linetype=2)+
labs(title="") + theme(plot.title = element_text(size=10)) +
scale_y_discrete(labels=c("Female intercept", "Male intercept", "Female Phylo SD", "Male Phylo SD")) +  theme(axis.text=element_text(size=5))
mcmc_areas(post_m1_looped, pars = c("b_muFemales_Intercept", "b_muMales_Intercept", "sd_Genus_species__muFemales_Intercept", "sd_Genus_species__muMales_Intercept"), point_est="median", prob = 0.90) + geom_vline(xintercept=0, linetype=2)+
labs(title="") + theme(plot.title = element_text(size=10)) +
scale_y_discrete(labels=c("Female intercept", "Male intercept", "Female Phylo SD", "Male Phylo SD")) +  theme(axis.text=element_text(size=5))
mcmc_areas(post_m1_looped, pars = c("b_muFemales_Intercept", "b_muMales_Intercept", "sd_Genus_species__muFemales_Intercept", "sd_Genus_species__muMales_Intercept"), point_est="median", prob = 0.90)
mcmc_areas(post_m1_looped, pars = c("b_muFemales_Intercept", "b_muMales_Intercept", "sd_Genus_species__muFemales_Intercept", "sd_Genus_species__muMales_Intercept"), point_est="median", prob = 0.90) +
labs(title="") + theme(plot.title = element_text(size=10)) +
scale_y_discrete(labels=c("Female intercept", "Male intercept", "Female Phylo SD", "Male Phylo SD")) +  theme(axis.text=element_text(size=5))
mcmc_areas(post_m1_looped, pars = c("b_muFemales_Intercept", "b_muMales_Intercept", "sd_Genus_species__muFemales_Intercept", "sd_Genus_species__muMales_Intercept"), point_est="median", prob = 0.90, prob_outer = 0.99) +
labs(title="") + theme(plot.title = element_text(size=10)) +
scale_y_discrete(labels=c("Female intercept", "Male intercept", "Female Phylo SD", "Male Phylo SD")) +  theme(axis.text=element_text(size=5))
mcmc_areas(post_m1_looped, pars = c("b_muFemales_Intercept", "b_muMales_Intercept", "sd_Genus_species__muFemales_Intercept", "sd_Genus_species__muMales_Intercept"), point_est="median", prob = 0.90, prob_outer = 0.99) +
labs(title="Model 1") + theme(plot.title = element_text(size=10)) +
scale_y_discrete(labels=c("Female intercept", "Male intercept", "Female Phylo SD", "Male Phylo SD")) +  theme(axis.text=element_text(size=5))
mcmc_areas(post_m1_looped, pars = c("b_muFemales_Intercept", "b_muMales_Intercept", "sd_Genus_species__muFemales_Intercept", "sd_Genus_species__muMales_Intercept"), point_est="median", prob = 0.90, prob_outer = 0.99, area_method = "equal height") +
labs(title="Model 1") + theme(plot.title = element_text(size=10)) +
scale_y_discrete(labels=c("Female intercept", "Male intercept", "Female Phylo SD", "Male Phylo SD")) +  theme(axis.text=element_text(size=5))
mcmc_areas(post_m1_looped, pars = c("b_muFemales_Intercept", "b_muMales_Intercept", "sd_Genus_species__muFemales_Intercept", "sd_Genus_species__muMales_Intercept"), point_est="median", prob = 0.90, prob_outer = 0.99, area_method = "scaled height") +
labs(title="Model 1") + theme(plot.title = element_text(size=10))
mcmc_areas(post_m1_looped, pars = c("b_muFemales_Intercept", "b_muMales_Intercept", "sd_Genus_species__muFemales_Intercept", "sd_Genus_species__muMales_Intercept"), point_est="median", prob = 0.90, prob_outer = 0.99, area_method = "scaled height", border_size = 1.2) +
labs(title="Model 1") + theme(plot.title = element_text(size=10)) +
scale_y_discrete(labels=c("b_muFemales_Intercept" = "Female intercept", "b_muMales_Intercept" = "Male intercept", "sd_Genus_species__muFemales_Intercept" = "Female Phylo SD", "sd_Genus_species__muMales_Intercept" = "Male Phylo SD"), expand = expansion(mult = c(0, 0))) +  theme(axis.text=element_text(size=5))
mcmc_areas(post_m1_looped, pars = c("b_muFemales_Intercept", "b_muMales_Intercept", "sd_Genus_species__muFemales_Intercept", "sd_Genus_species__muMales_Intercept"), point_est="median", prob = 0.90, prob_outer = 0.99, area_method = "scaled height", border_size = 1.2) +
labs(title="Model 1") + theme(plot.title = element_text(size=10)) +
scale_y_discrete(labels=c("b_muFemales_Intercept" = "Female intercept", "b_muMales_Intercept" = "Male intercept", "sd_Genus_species__muFemales_Intercept" = "Female Phylo SD", "sd_Genus_species__muMales_Intercept" = "Male Phylo SD"), expand = expansion(mult = c(0.1, 0))) +  theme(axis.text=element_text(size=5))
mcmc_areas(post_m1_looped, pars = c("b_muFemales_Intercept", "b_muMales_Intercept", "sd_Genus_species__muFemales_Intercept", "sd_Genus_species__muMales_Intercept"), point_est="median", prob = 0.90, prob_outer = 0.99, area_method = "scaled height", border_size = 1.2) +
labs(title="Model 1") + theme(plot.title = element_text(size=10)) +
scale_y_discrete(labels=c("b_muFemales_Intercept" = "Female intercept", "b_muMales_Intercept" = "Male intercept", "sd_Genus_species__muFemales_Intercept" = "Female Phylo SD", "sd_Genus_species__muMales_Intercept" = "Male Phylo SD"), expand = expansion(mult = c(0.05, 0))) +  theme(axis.text=element_text(size=5))
log(4.9)
95000/13
setwd("~/GitHub/DPM")
library(cmdstanr)
library(phytools)
library(phangorn)
library(posterior)
source("chop_tree.R")
## Simulate a random phylogenetic tree (pure birth)
N_tips <- 25
# Vectors to hold rank statistics for A matrix
A_1_2_rank <- c()
A_2_1_rank <- c()
# Compile stan models
sim_mod <- cmdstan_model(stan_file="DPM_sim.stan")
set_cmdstan_path()
?set_cmdstan_path
install_cmdstan()
install_cmdstan(dir = "C:\\Program Files\\R\\R-4.2.0\\library")
check_cmdstan_toolchain(fix = TRUE)
install_cmdstan(dir = "C:\\Program Files\\R\\R-4.2.0\\library")
# Compile stan models
sim_mod <- cmdstan_model(stan_file="DPM_sim.stan")
set_cmdstan_path()
rebuild_cmdstan()
?set_cmdstan_path
install_cmdstan()
install_cmdstan(dir = "C:\\Program Files\\R\\R-4.2.0\\library")
install_cmdstan(dir = "C:\\Program Files\\R\\R-4.2.0\\library", overwrite=TRUE)
set_cmdstan_path(path = "C:\\Program Files\\R\\R-4.2.0\\library\\cmdstan-2.29.2")
set_cmdstan_path(path = "C:\\Program Files\\R\\R-4.2.0\\library\\cmdstan-2.29.2")
library(cmdstanr)
# Compile stan models
sim_mod <- cmdstan_model(stan_file="DPM_sim.stan")
setwd("~/GitHub/DPM")
# Compile stan models
sim_mod <- cmdstan_model(stan_file="DPM_sim.stan")
pwd()
getwd()
fit_mod <- cmdstan_model(stan_file="DPM_fit.stan")
cmdstanr_example(example="logistic")
# Compile stan models
sim_mod <- cmdstan_model(stan_file="DPM_sim.stan")
?cmdstan_model
source("chop_tree.R")
# Compile stan models
sim_mod <- cmdstan_model("DPM_sim.stan")
set_cmdstan_path()
library(cmdstanr)
# Compile stan models
sim_mod <- cmdstan_model("DPM_sim.stan")
set_cmdstan_path()
set_cmdstan_path(path = "C:\\Program Files\\R\\R-4.2.0\\library\\cmdstan")
# Compile stan models
sim_mod <- cmdstan_model("DPM_sim.stan")
library(rethinking)
library(phytools)
library(phangorn)
source("chop_tree.R")
## Simulate a random phylogenetic tree (pure birth)
N_tips <- 25
# Vectors to hold rank statistics for A matrix
A_1_2_rank <- c()
A_2_1_rank <- c()
# Compile stan models
sim_mod <- stan_model(file="DPM_sim.stan")
fit_mod <- stan_model(file="DPM_fit.stan")
###################################################
#### Loop over simulations ########################
N_sims <- 250
for ( s in 1:N_sims ) {
tree <- pbtree(n = N_tips)
tree_data <- chop_tree(tree)
#  Specify number of traits
J <- 2
tree_data$J <- 2
tree_data$resp_type <- c(1,1)
# Draw samples from generative model
sim <- sampling(sim_mod, data=tree_data, iter=1, chains=1, algorithm="Fixed_param")
post_sim <- extract.samples(sim)
A_sim <- post_sim$A[1,,]
# Add simulated outcome data
tree_data$X <- post_sim$X[1,,]
n_warmup <- 100
n_samps <- 250
n_chains <- 8
fit <- sampling(fit_mod, data=tree_data, warmup=n_warmup, iter=n_samps, chains=8, cores=8, control=list(adapt_delta=0.9), init="0")
post_fit <- extract.samples(fit)
A_fit <- post_fit$A
A_1_2_rank[s] <- rank( c(A_sim[1,2], A_fit[,1,2]) )[1]
A_2_1_rank[s] <- rank( c(A_sim[2,1], A_fit[,2,1]) )[1]
} # end loop over simulations
# Save results
write.csv(data.frame(A_1_2_rank, A_2_1_rank), file="SBC_ranks.csv")
